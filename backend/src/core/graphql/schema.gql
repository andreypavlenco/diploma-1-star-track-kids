# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Boost {
  activations: [BoostActivation!]
  cooldownDays: Int!
  description: String
  durationHours: Int!
  id: ID!
  name: String!
}

type BoostActivation {
  activatedAt: DateTime!
  boost: Boost!
  boostId: ID!
  expiresAt: DateTime!
  id: ID!
  user: UserModel!
  userId: ID!
}

input CreateGoalInput {
  description: String
  starReward: Int!
  title: String!
}

input CreateInvitationInput {
  email: String!
  role: UserRole!
}

input CreateQuestInput {
  deadline: DateTime!
  description: String
  difficulty: Int!
  goalId: ID
  title: String!
}

input CreateRewardInput {
  description: String
  starCost: Int!
  title: String!
}

input CreateRoomInput {
  name: String!
}

input CreateUserInput {
  email: String!
  password: String!
  role: UserRole!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Goal {
  completedAt: DateTime
  creator: UserModel!
  creatorId: ID!
  description: String
  id: ID!
  quests: [Quest!]
  starReward: Int!
  title: String!
}

type Invitation {
  acceptedAt: DateTime!
  createdAt: DateTime!
  email: String!
  expiresAt: DateTime!
  id: ID!
  invitedBy: UserModel!
  invitedById: ID!
  role: UserRole!
  room: Room!
  roomId: ID!
  token: String!
  updatedAt: DateTime!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  acceptInvitation(token: String!): Boolean!
  activateBoost(boostId: String!): BoostActivation!
  completeGoal(goalId: String!): Goal!
  createGoal(data: CreateGoalInput!): Goal!
  createInvitation(data: CreateInvitationInput!, roomId: String!): Boolean!
  createQuest(data: CreateQuestInput!, roomId: String!): Quest!
  createReward(data: CreateRewardInput!): RewardModel!
  createRoom(data: CreateRoomInput!): Room!
  createUser(data: CreateUserInput!): UserModel!
  deleteGoal(goalId: String!): Boolean!
  deleteQuest(questId: String!): Quest!
  deleteReward(rewardId: String!): Boolean!
  deleteRoom(roomId: String!): Boolean!
  loginUser(data: LoginInput!): UserModel!
  logoutUser: Boolean!
  questCompletion(questId: String!): Boolean!
  uncompleteGoal(goalId: String!): Goal!
  updateGoal(data: UpdateGoalInput!, goalId: String!): Goal!
  updateQuest(data: CreateQuestInput!, questId: String!): Quest!
  updateReward(data: UpdateRewardInput!, rewardId: String!): RewardModel!
  updateRoom(data: CreateRoomInput!, roomId: String!): Room!
}

type Query {
  createRewardPurchase(rewardId: String!): RewardPurchaseModel!
  findActiveGoals: [Goal!]!
  findAllQuestByRoomMemberId: [Room!]!
  findAllQuestRoom(roomId: String!): [Quest!]!
  findAllRoomsUser: [Room!]!
  findByCreatorId: RewardModel!
  findByIdBoost(boostId: String!): Boost!
  findByIdQuest(questId: String!, roomId: String!): Quest!
  findCompletedGoals: [Goal!]!
  findGoalById(goalId: String!): Goal!
  findGoalForChild: Goal!
  findProfile: UserModel!
  findRewardById(rewardId: String!): RewardModel!
  findRewardsForChild: [RewardModel!]!
  findRoomById(roomId: String!): Room!
  getActiveBoosts: BoostActivation!
  getUserActivations: [Boost!]!
  listAllBoosts: [Boost!]!
}

type Quest {
  completions: [QuestCompletion!]
  creator: UserModel!
  creatorId: ID!
  deadline: DateTime!
  description: String
  difficulty: Int!
  goal: Goal
  goalId: ID
  id: ID!
  room: Room
  roomId: ID
  title: String!
}

type QuestCompletion {
  completedAt: DateTime!
  id: ID!
  isLate: Boolean!
  quest: Quest!
  questId: ID!
  starsAwarded: Int!
  user: UserModel!
  userId: ID!
}

type RewardModel {
  createdAt: DateTime!
  creator: UserModel!
  creatorId: String!
  description: String
  id: ID!
  purchases: [RewardPurchaseModel!]!
  starCost: Int!
  title: String!
}

type RewardPurchaseModel {
  child: [UserModel!]!
  childId: String!
  createdAt: DateTime!
  creator: UserModel!
  creatorId: String!
  description: String
  id: ID!
  purchasedAt: DateTime!
  rewarId: String!
  reward: [RewardModel!]!
  starCost: Int!
}

type Room {
  createUser: UserModel!
  createUserId: ID!
  createdAt: DateTime!
  id: ID!
  invitations: [Invitation!]!
  members: [RoomMember!]!
  name: String!
  quests: [Quest!]
}

type RoomMember {
  id: ID!
  joinedAt: DateTime!
  role: UserRole!
  room: Room!
  roomId: ID!
  user: UserModel!
  userId: ID!
}

input UpdateGoalInput {
  description: String
  starReward: Int
  title: String
}

input UpdateRewardInput {
  description: String
  starCost: Int
  title: String
}

type UserModel {
  boosts: [BoostActivation!]!
  children: [UserModel]!
  completions: [QuestCompletion!]!
  createdAt: DateTime!
  createdRooms: [Room!]!
  email: String!
  goals: [Goal!]!
  id: ID!
  parents: [UserModel]!
  password: String!
  quests: [Quest!]!
  reward: [RewardModel!]
  rewardsPurchase: [RewardPurchaseModel!]
  role: UserRole!
  roomInvitations: [Invitation!]!
  rooms: [RoomMember!]
  stars: Int!
  updateAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  CHILD
  PARENT
}